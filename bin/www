#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('reddit:server');
const http = require('http');
const cluster = require('cluster');
const mongoose = require('mongoose');
const os = require('os');
const config = require('../config/config');

/**
 * Get port from environment and store in Express.
 */

if(cluster.isMaster) {
    const numofWorkers = os.cpus().length;

    for(let index = 0; index < numofWorkers; index++) {
        cluster.fork();
    }

    //Emit event while a worker is created
    cluster.on('online', (worker) => {
        console.log('Worker '+worker.process.pid+' is online');
    });

    //Emit event while worker is dead
    cluster.on('exit', (worker, code, signal) => {
        console.log('Worker '+worker.process.pid+' died with code: '+code+', and signal: '+signal);
        console.log('Starting an new worker');
        cluster.fork();
    })
} else {
    const port = normalizePort(process.env.PORT || config.serverPort);
    app.set('port', port);


    /**
     * Create HTTP server.
     */

    const server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
        // named pipe
            return val;
        }

        if (port >= 0) {
        // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
        console.log('Server Process ' + process.pid+ ' is listening to all incomming request at '+ bind);
        debug('Listening on ' + bind);
    }

    /**
     * Mongoose Connection 
     */

    let mongooseConnectionUrl = config.dbUrl;
    mongoose.connect(mongooseConnectionUrl, {useNewUrlParser: true, useUnifiedTopology: true});

    mongoose.connection.on('connected', function() {
        console.log('Mongoose default connection open to '+ mongooseConnectionUrl);
    })

    mongoose.connection.on('disconnected', function() {
        console.log('Mongoose default connection disconnected');
    })

    mongoose.connection.on('connected', function() {
        console.log('Mongoose default connection open to '+ mongooseConnectionUrl);
    })

    process.on('SIGINT', function() {
        mongoose.connection.close(function() {
            console.log('Mongoose default connection disconnected through termination');
            process.exit(0);
        })
    })


}